(function(s,d){typeof exports=="object"&&typeof module<"u"?d(exports,require("@tanstack/vue-query"),require("vue")):typeof define=="function"&&define.amd?define(["exports","@tanstack/vue-query","vue"],d):(s=typeof globalThis<"u"?globalThis:s||self,d(s.VueQueryRequestUtils={},s.VueQuery,s.Vue))})(this,function(s,d,a){"use strict";const $=Symbol("api");function q(){const t=a.inject($);if(t)return t}function v(t){return{install(e){e.provide($,t)}}}const f=t=>typeof t=="string"||typeof t=="number"||typeof t=="boolean";class A extends Error{constructor(e){super(`[useGet] ${e}`),this.name="UseGetError"}}const l=t=>{const e=a.toValue(t);if(Array.isArray(e))return e.map(l);if(e&&typeof e=="object"&&!Array.isArray(e)){const n={};for(const r in e)n[r]=l(e[r]);return n}return e},j=(t,e="paramRef")=>{if(t!=null&&!f(t)){if(Array.isArray(t)){t.forEach((n,r)=>{if(!f(n))throw new A(`[${e}[${r}]] must be string | number | boolean, got ${typeof n}`)});return}if(typeof t=="object"){if("path"in t||"query"in t){if(t.path&&(!Array.isArray(t.path)||!t.path.every(f)))throw new A(`[${e}.path] must be an array of string | number | boolean`);if(t.query&&(typeof t.query!="object"||Array.isArray(t.query)))throw new A(`[${e}.query] must be a plain object`);if(t.query){for(const[n,r]of Object.entries(t.query))if(!f(r)&&!(Array.isArray(r)&&r.every(f)))throw new A(`[${e}.query.${n}] must be string | number | boolean or array of those`)}return}for(const[n,r]of Object.entries(t))if(!f(r)&&!(Array.isArray(r)&&r.every(f)))throw new A(`[${e}.${n}] must be string | number | boolean or array of those`);return}throw new A(`[${e}] Unsupported type: ${typeof t}`)}},g=(t,e)=>{let n=[],r={};f(e)?n=[String(e)]:Array.isArray(e)?n=e.map(String):e&&typeof e=="object"&&("path"in e||"query"in e?(Array.isArray(e.path)&&(n=e.path.map(String)),e.query&&typeof e.query=="object"&&!Array.isArray(e.query)&&(r=e.query)):r=e);const p=n.length>0?`${n.join("/")}`:"",u=Object.keys(r).length>0?`?${new URLSearchParams(Object.entries(r).flatMap(([h,o])=>Array.isArray(o)?o.map(b=>[h,String(o)]):[[h,String(o)]])).toString()}`:"";return`${t}${p}${u}`};function S({url:t,queryKey:e,API:n,options:r,paramRef:p}){if(!t||typeof t!="string")throw new Error("Invalid or missing URL");const u=a.isRef(p)?p:a.ref(p),h=a.computed(()=>{const y=a.toValue(e),i=l(u),c=Array.isArray(y)?y.map(l):[l(y)];return i&&(typeof i=="object"&&!Array.isArray(i)&&("path"in i||"query"in i)?c.push(i.path??[],i.query??{}):c.push(i)),c}),o=q(),b=n??o;if(!b)throw new Error("No API instance provided, please provide an api instance via the API prop or use the provideApi function.");return d.useQuery({queryKey:h.value,queryFn:async()=>{const y=l(a.unref(u));j(y);const i=y?g(t,y):t;return(await b.get(i)).data},...r})}function k({API:t,method:e,url:n,requestConfig:r,options:p,mutationKey:u}){const h=q(),o=t??h,b=a.computed(()=>u?Array.isArray(u)?u:[u]:void 0);if(!o)throw new Error("No API instance provided, please provide an api instance via the API prop or use the provideApi function.");const y=e.toLowerCase();return d.useMutation({mutationKey:b.value,mutationFn:async i=>{let c;const w=i??{};switch(y){case"post":c=await o.post(n,w,r);break;case"put":c=await o.put(n,w,r);break;case"patch":c=await o.patch(n,w,r);break;case"delete":c=await o.delete(n,{...r,data:w});break;default:throw new Error(`HTTP method not supported: ${e}`)}return c.data},...p})}s.provideApi=v,s.useApi=q,s.useGet=S,s.useSend=k,Object.defineProperty(s,Symbol.toStringTag,{value:"Module"})});
